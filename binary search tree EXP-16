#include<stdio.h>
#include<stdlib.h>
struct TreeNode* left;
int data;
struct TreeNode* right;
};
struct TreeNode* createNode(int value){
    struct TreeNode* node =(struct TreeNode*)malloc(sizeof(struct TreeNode));
    node->data = value;
    node->left = node->right = NULL;
    return node;
}
void insert(struct TreeNode* root , int value){
    if(root==NULL)
    return createNode(value);
    else{
        struct TreeNode* queue[100];
    int front = 0 , rear = 0;
    queue[rear++] = root;
   while(front != rear){
        struct TreeNode* temp = queue[front++];
       
        if(temp->left == NULL){
        temp->left = createNode(value);
        break;
        }
       else if(temp->right == NULL){
       temp->right = createNode(value);
       break;
       }
      else{
          queue[rear++] = temp->left;
        queue[rear++] = temp->right;
        }
      }
      return root;
}
void preorder(struct TreeNode* root){
    if(root==NULL)
    return;
    printf("%d ", root->data);
    preorder(root->left);
    preorder(root->right);
}
void inorder(struct TreeNode* root){
    if(root==NULL)
    return;
    preorder(root->left);
     printf("%d ", root->data);
    preorder(root->right);
}
void postorder(struct TreeNode* root){
    if(root==NULL)
    return;
    preorder(root->left);
    preorder(root->right);
     printf("%d ", root->data);
}
void leveloerder(struct TreeNode* root){
    struct TreeNode* queue[100];
    int front = 0 , rear = 0;
    queue[rear++] = root;
    while(front != rear){
        struct TreeNode* temp = queue[front++];
        printf("%d ",temp->data);
        if(temp->left != NULL)
        queue[rear++] = temp->left;
        if(temp->right != NULL)
        queue[rear++] = temp->right;
    }
}
struct TreeNode* search(struct TreeNode* root , int target){
     struct TreeNode* queue[100];
    int front = 0 , rear = 0;
    queue[rear++] = root;
    while(front != rear){
        struct TreeNode* temp = queue[front++];
        if(temp->data == target){
            return temp;
        }
        if(temp->left != NULL)
        queue[rear++] = temp->left;
        if(temp->right != NULL)
        queue[rear++] = temp->right;
    }
    return NULL;
}
struct TreeNode* findDeepest(struct TreeNode* root){
     struct TreeNode* queue[100];
    int front = 0 , rear = 0;
    queue[rear++] = root;
    while(front != rear){
        struct TreeNode* temp = queue[front++];
        printf("%d ",temp->data);
        if(temp->left != NULL)
        queue[rear++] = temp->left;
        if(temp->right != NULL)
        queue[rear++] = temp->right;
    }
    int i = (rear-2)/2;
    if(queue[i]->left==temp)
    queue[i]->left=NULL;
    else
    queue[i]->right=NULL:
    return temp;
}
void delete(struct TreeNode* root , int value){
    struct TreeNode* temp = search(root , value);
    if(temp==NULL){
        printf("Element Not Found!!!!!\n");
        else{
            struct TreeNode* last = findDeepest(root);
            temp->data = last->data;
            printf("Element deleted!!!!1\n");
        }
    }
}
int main() // 10 20 30 40 -1 60 70 80 90 -1 -1 -1 -1 100
{
    int n;
    printf("Enter the value of N: ");
    scanf("%d", &n);

    init(); // Initialize the tree.

    while (1)
    {
        printf("1.Insert\n");
        printf("2.Pre-Order\n");
        printf("3.In-order\n");
        printf("4.Post-order\n");
        printf("5.Exit\n");

        int choice;
        printf("Enter Choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            insert(n);
            break;
        case 2:
           
            preorder(0);
            break;
        case 3:
           inorder();
            break;
        case 4:
            
            postorder(0);
            break;
        case 5:
        levelorder(root);
        break;
           case 6;
           
           break;
            case 7;
           
           break;
            case 8;
           
           break;
           
        default:
            printf("Invalid Choices\n");
            break;
        }
    }
    return 0;
}
