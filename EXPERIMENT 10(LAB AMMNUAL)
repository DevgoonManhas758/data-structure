//stack Implementation using linked list
#include<stdio.h>
#include<stdlib.h>
struct Node{
    int data;
    struct Node* next;
};
struct Node* top = NULL;
void Push(int value){
    struct Node* temp = (struct Node*)malloc(sizeof(struct Node));
    if(temp == NULL)
    printf("Stack Overflow!!!!\n");
    else{
        temp->data = value;
        temp->next = top;
        top = temp;
        printf("Push %d into the stack\n",value);
    }
}
int pop(){
    if(top == NULL){
        printf("Stack Underflow!!!!!\n");
        return -1;
    }
    else{
        struct Node *temp = top;
        top = top->next;
        int val = temp->data;
        free(temp);
        return val;
    }
}
int peek(){
    if(top == NULL){
        printf("Stack is Empty!!!!\n");
        return -1;
    }
    else{
        return top->data;
    }
}
void show(){
    if(top == NULL)
    printf("Stack is Empty!!!!\n");

else{
    printf("Stack Elements Are : \n");
    struct Node* temp = top;
    while(temp != NULL){
        printf("%d\n", temp->data);
        temp=temp->next;
    }
    printf("\n");
}
int main(){
    while(1){
        printf("1. Push\n");
         printf("2. Pop\n");
          printf("3. Peek\n");
           printf("4. show\n");
            printf("5. Exit\n");
            int choice , val , res;
            printf("Enter choice : ");
            scanf("%d",&choice);
            switch(choice){
                case 1:
                printf("Enter Element : ");
                scanf("%d",&val);
                Push(val);
                
                break;
                 case 2:
                 res = pop();
                 if(res != -1)
                 printf("%d pop freom the stack\n",res);
                
                break;
                 case 3:
                 res = peek();
                 if(res != -1)
                 printf("stack top element is %d\n",res);
                
                break;
                 case 4:
                show();
                break;
                 case 5:
                
                break;
            }
    }
}
return 0;
}
