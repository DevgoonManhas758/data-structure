#include <stdio.h>
#include <stdlib.h>

typedef struct node {
    int data;
    struct node *next;
} Node;

Node *Head = NULL;

Node* CreateNode(int el) {
    Node *NewNode = (Node *)malloc(sizeof(Node));
    NewNode->data = el;
    NewNode->next = NULL;
    return NewNode;
}

void insertNodeInBeg(int el) {
    Node *NewNode = CreateNode(el);
    NewNode->next = Head;
    Head = NewNode;
    printf("Node inserted!!\n");
}

void insertNodeAtEnd(int el) {
    Node *NewNode = CreateNode(el);
    if (Head == NULL) {
        Head = NewNode;
    } else {
        Node *temp = Head;
        while (temp->next != NULL)
            temp = temp->next;
        temp->next = NewNode;
    }
    printf("Node inserted!!\n");
}

void insertNodeAtAnyPos(int el, int pos) {
    if (Head == NULL) {
        printf("List is empty!!\n");
        if (pos == 1)
            insertNodeInBeg(el);
    } else {
        Node *temp = Head;
        for (int i = 1; i < pos - 1 && temp->next != NULL; i++)
            temp = temp->next;

        if (temp != NULL) {
            Node *NewNode = CreateNode(el);
            NewNode->next = temp->next;
            temp->next = NewNode;
            printf("Node inserted!!\n");
        } else {
            printf("Invalid position!!\n");
        }
    }
}

void deleteNodeFromBeg() {
    if (Head == NULL) {
        printf("List is empty!!\n");
    } else {
        Node *temp = Head;
        Head = Head->next;
        free(temp);
        printf("Node deleted!!\n");
    }
}

void deleteNodeFromEnd() {
    if (Head == NULL) {
        printf("List is empty!!\n");
    } else if (Head->next == NULL) {
        free(Head);
        Head = NULL;
    } else {
        Node *temp = Head;
        while (temp->next->next != NULL)
            temp = temp->next;
        free(temp->next);
        temp->next = NULL;
        printf("Node deleted!!\n");
    }
}

void deleteNodeFromAnyPos(int pos) {
    if (Head == NULL) {
        printf("List is empty!!\n");
    } else if (pos == 1) {
        deleteNodeFromBeg();
    } else {
        Node *temp = Head;
        for (int i = 1; i < pos - 1 && temp->next != NULL; i++)
            temp = temp->next;
        if (temp->next != NULL) {
            Node *del = temp->next;
            temp->next = temp->next->next;
            free(del);
            printf("Node deleted!!\n");
        } else {
            printf("Invalid position!!\n");
        }
    }
}

void search(int target) {
    if (Head == NULL) {
        printf("List is empty!!\n");
    } else {
        Node *temp = Head;
        while (temp != NULL) {
            if (temp->data == target) {
                printf("Found!!\n");
                return;
            }
            temp = temp->next;
        }
        printf("Not found!!\n");
    }
}

void sort() {
    if (Head == NULL) {
        printf("List is empty!!\n");
    } else {
        Node *i, *j;
        int temp;
        for (i = Head; i != NULL; i = i->next) {
            for (j = i->next; j != NULL; j = j->next) {
                if (i->data > j->data) {
                    temp = i->data;
                    i->data = j->data;
                    j->data = temp;
                }
            }
        }
        printf("List sorted!!\n");
    }
}

void display() {
    if (Head == NULL) {
        printf("List is empty!!\n");
    } else {
        Node *temp = Head;
        while (temp != NULL) {
            printf("%d ", temp->data);
            temp = temp->next;
        }
        printf("\n");
    }
}

int main() {
    int choice, val, pos;
    while (1) {
        printf("\n--- Singly Linked List ---\n");
        printf("1. Insert node at beginning\n");
        printf("2. Insert node at end\n");
        printf("3. Insert node at any position\n");
        printf("4. Delete node from beginning\n");
        printf("5. Delete node from end\n");
        printf("6. Delete node from any position\n");
        printf("7. Search\n");
        printf("8. Sort\n");
        printf("9. Display list\n");
        printf("10. Exit\n");
        printf("Enter choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                printf("Enter value: ");
                scanf("%d", &val);
                insertNodeInBeg(val);
                break;
            case 2:
                printf("Enter value: ");
                scanf("%d", &val);
                insertNodeAtEnd(val);
                break;
            case 3:
                printf("Enter value: ");
                scanf("%d", &val);
                printf("Enter position: ");
                scanf("%d", &pos);
                insertNodeAtAnyPos(val, pos);
                break;
            case 4:
                deleteNodeFromBeg();
                break;
            case 5:
                deleteNodeFromEnd();
                break;
            case 6:
                printf("Enter position: ");
                scanf("%d", &pos);
                deleteNodeFromAnyPos(pos);
                break;
            case 7:
                printf("Enter target: ");
                scanf("%d", &val);
                search(val);
                break;
            case 8:
                sort();
                break;
            case 9:
                display();
                break;
            case 10:
                printf("Exiting...\n");
                return 0;
            default:
                printf("Invalid choice!!\n");
        }
        system("pause");
    }
}
