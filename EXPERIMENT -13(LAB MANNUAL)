void preorder(int root){
if(tree[root] == -1)
return ;
printf("%d ", tree[root]);
preorder(2*root+1);//left child
preorder(2*root+2);//right child
}



void inorder(int root){
if(tree[root] == -1)
return ;

inorder(2*root+1);// left child
printf("%d ", tree[root]);
inorder(2*root+2);//right child
}



void postorder(int root){
if(tree[root] == -1)
return ;

postorder(2*root+1);// left child 
postorder(2*root+2);//right child
printf("%d ", tree[root]);
}








more to be filled



#include <stdio.h>
#include <stdlib.h>
#define SIZE 100
int tree[SIZE];

void init()
{
    for (int i = 0; i < SIZE; i++)
    {
        tree[i] = -1; // Initialize all nodes to -1.
    }
}

// Function to insert nodes in the tree.
// This function takes the number of nodes as input and inserts them in level order.
void insert(int n)
{
    for (int i = 0; i < n; i++) // Level order insertion in binary tree.
    {
        scanf("%d", &tree[i]);
    }
}

// Traversing in tree linked list techinque.
// Recursive function to print the tree in pre-order.
void preOrder(int root)
{
    if (root >= SIZE || tree[root] == -1) // Base case for recursion.
        return;
    printf("%d ", tree[root]); // Print the value of the node.
    preOrder(2 * root + 1);    // Left child.
    preOrder(2 * root + 2);    // Right child.
}

void inOrder(int root)
{
    if (root >= SIZE || tree[root] == -1) // Base case for recursion.
        return;
    inOrder(2 * root + 1);     // Left child.
    printf("%d ", tree[root]); // Print the value of the node.
    inOrder(2 * root + 2);     // Right child.
}

void postOrder(int root)
{
    if (root >= SIZE || tree[root] == -1) // Base case for recursion.
        return;
    postOrder(2 * root + 1);   // Left child.
    postOrder(2 * root + 2);   // Right child.
    printf("%d ", tree[root]); // Print the value of the node.
}

void search(int target)
{
}
int findMin(int i){
        while(i*2 +1 < MAX && tree[i*2 +1] != -1){
            i = i*2 +1;
        }
        return i
}
int findMax(int i){
        while(i*2 +2 < MAX && tree[i*2 +2] != -1){
            i = i*2 +2;
        }
        return i
}
void delete(int i,int value){
    i=search(i,value);
    if(i==1)
    printf("Element not fount!!!!\n");
    else{
        int left = 2*i + 1;
        int right = 2*1 + 2;
        if(left>=MAX || tree[left]==-1) &&n(right>=MAX || tree[right]==-1))
        tree[i] = -1;
        else if(tree[right]==-1){//only left child
            int max = findMax(left);
            tree[i] = tree[max];
            delete(max,tree[max]);
            
        }
        else if(tree[left]==-1){//only right child
            int min = findMin(right);
            tree[i] = tree[min];
            delete(min,tree[min]);
        }
        else{//both child
            int min = findMin(right);
            tree[i] = tree[min];
            delete
        }
        
    }
}

int main() // 10 20 30 40 -1 60 70 80 90 -1 -1 -1 -1 100
{
    int n;
    printf("Enter the value of N: ");
    scanf("%d", &n);

    init(); // Initialize the tree.

    while (1)
    {
        printf("1.Insert\n");
        printf("2.Pre-Order\n");
        printf("3.In-order\n");
        printf("4.Post-order\n");
        printf("5.Exit\n");

        int choice;
        printf("Enter Choice: ");
        scanf("%d", &choice);

        switch (choice)
        {
        case 1:
            insert(n);
            break;
        case 2:
            printf("\nPre-order Traversal : ");
            preOrder(0);
            break;
        case 3:
            printf("\nIn-order Traversal : ");
            inOrder(0);
            break;
        case 4:
            printf("\nPost-order Traversal : ");
            postOrder(0);
            break;
        case 5:
            exit(0);
        default:
            printf("Invalid Choices\n");
            break;
        }
    }
    return 0;
}
