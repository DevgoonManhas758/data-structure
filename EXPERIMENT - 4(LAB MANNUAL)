#include <stdio.h>
#include <math.h>
#include <string.h>
#include <ctype.h>

int top = -1, top2 = -1;
int operator[100];
char operand[100][3];

int precedence(char op) {
    switch (op) {
        case '+':
        case '-': return 1;
        case '*':
        case '/': return 2;
        case '^': return 3;
        default : return 0;
    }
}

void doProcess() {
    int x = operand[top--][0] - '0';
    int y = operand[top--][0] - '0';
    char op = operator[top2--];
    int z;

    switch (op) {
        case '+': z = y + x; break;
        case '-': z = y - x; break;
        case '*': z = y * x; break;
        case '/': z = y / x; break;
        case '^': z = pow(y, x); break;
    }

    operand[++top][0] = z + '0';
}

int evalInfixExpression(char* exp) {
    int size = strlen(exp);

    for (int i = 0; i < size; i++) {
        char ch = exp[i];

        if (isdigit(ch)) {
            int num = 0;
            while (isdigit(exp[i])) {
                num = num * 10 + (exp[i++] - '0');
            }
            i--;
            operand[++top][0] = num + '0';
        } else if (ch == '(') {
            operator[++top2] = ch;
        } else if (ch == ')') {
            while (operator[top2] != '(') {
                doProcess();
            }
            top2--;
        } else {
            while (top2 != -1 && precedence(operator[top2]) >= precedence(ch)) {
                doProcess();
            }
            operator[++top2] = ch;
        }
    }

    while (top2 != -1) {
        doProcess();
    }

    return operand[top--][0] - '0';
}

int evalPostfixExp(char* exp) {
    int size = strlen(exp);
    for (int i = 0; i < size; i++) {
        char ch = exp[i];

        if (isdigit(ch)) {
            int num = 0, place = 1;
            while (isdigit(exp[i])) {
                num = num * 10 + (exp[i++] - '0');
            }
            i--;
            operand[++top][0] = num + '0';
        } else {
            int x = operand[top--][0] - '0';
            int y = operand[top--][0] - '0';
            int z;

            switch (ch) {
                case '+': z = y + x; break;
                case '-': z = y - x; break;
                case '*': z = y * x; break;
                case '/': z = y / x; break;
                case '^': z = pow(y, x); break;
            }

            operand[++top][0] = z + '0';
        }
    }

    return operand[top--][0] - '0';
}

int evalPrefixExp(char* exp) {
    int size = strlen(exp);
    for (int i = size - 1; i >= 0; i--) {
        char ch = exp[i];

        if (isdigit(ch)) {
            int num = 0, place = 1;
            while (isdigit(exp[i])) {
                num = num + (exp[i--] - '0') * place;
                place *= 10;
            }
            i++;
            operand[++top][0] = num + '0';
        } else {
            int x = operand[top--][0] - '0';
            int y = operand[top--][0] - '0';
            int z;

            switch (ch) {
                case '+': z = x + y; break;
                case '-': z = x - y; break;
                case '*': z = x * y; break;
                case '/': z = x / y; break;
                case '^': z = pow(x, y); break;
            }

            operand[++top][0] = z + '0';
        }
    }

    return operand[top--][0] - '0';
}

int main() {
    char str[100];

    printf("Enter infix expression: ");
    gets(str);
    int result = evalInfixExpression(str);
    printf("Result = %d\n", result);

    printf("Enter postfix expression: ");
    gets(str);
    result = evalPostfixExp(str);
    printf("Result = %d\n", result);

    printf("Enter prefix expression: ");
    gets(str);
    result = evalPrefixExp(str);
    printf("Result = %d\n", result);

    return 0;
}
